// TouchTyping_shunkuntype_gemizing
{{toc}}

!目的
shunkuntypeの配布を容易にするためgemを使って開発をすすめるためのメモ．
!経緯
[[Shunkuntype_Coding]]にあるとおり，command line interfaceアプリとしてshunkuntypeは動作していた．しかし，幾つかの問題点があった．
# 開発途中でuserによる検証を行っていたので，最新版のinstallに手間がかかる
# install時に練習履歴などのdata fileをいちいち移行しないといけない．
# Rakefile.rbから動くようにしていたため，
## 各々のプログラムを起動
## code filesが分散
## directory構造が定まっていない
などである．

そこでgem標準での開発に移行した．これによって
# 標準的なgem installで最新版を常に維持可能
# data fileと実行ファイルが別の場所にあるので，いちいち移行する必要がない
# directory構造やoptparseによる標準的な記述が可能
になった．また，
* class化
が強制されるためcodeの隠蔽やyardドキュメントでの参照がしやすくなった．

ここで一つ懸念事項であった教材data filesの公開の是非は，
* local serverを立てて，そこからdown load
することで回避した．

その他の設計思想は[[Shunkuntype_Coding]]を踏襲している．

!!追補(2016/3/9)
瀬川杯のチョンボでむしゃくしゃしていたので，その勢いをshunkuntypeの公開に向けた．
* rubygem.orgへの登録
* githubへの公開
が完了．

方針は，todoのDB.prepareを参照して~/.shunkuntypeの下にすべてのdataをおいた．さらに，
そこにserver_data.txtを置いて，server情報を明示している．review, submitなどがその情報を利用．
<<< tcsh
bob% cat ~/.shunkuntype/server_data.txt
bob@dmz0:/Users/bob/Sites/nishitani0/ShunkunTyper/mem_data
>>>
としている．

これにともない以下のinit周りもDataFilesに統合した．
!!!立ち上げ(-i)
練習，スピードデータを作成しておく必要がある．
 bob% shunkuntype --init
過去のデータを移行は別に後述．
!!! 過去のデータを移行(-i)
gem化する前の古いshunkuntypeで練習していた人は，データを移行する必要がある．shunkuntype 1.0.1以降ではデータの名前が変更されているので注意．
<<< tcsh
[bob:~/.shunkuntype] bob% ls -lat
total 24
drwxr-xr-x    5 bob  501   170  3 10 14:16 ./
drwxr-xr-x  128 bob  501  4352  3 10 13:58 ../
-rw-r--r--    1 bob  501  1036  3 10 13:09 speed_data.txt
-rw-r--r--    1 bob  501  3924  3 10 13:08 training_data.txt
-rw-r--r--    1 bob  501    59  3  9 14:10 server_data.txt
>>>
<<< tcsh
bob% cp ../shunkuntype/*_data.txt .
bob% shunkuntype --init
Shunkuntype says 'Hello world'.
./shunkuntype_speed_data.txt exits.
./shunkuntype_training_data.txt exits.
>>>

! gem開発環境の構築
{{attach_anchor_string(「パーフェクトRuby」15章,PerfectRuby_c15_gems.pdf)}}を参照して作成していく．
「パーフェクトRuby」ではtest駆動になっていなかったが，ある程度までは
test駆動で進めたほうがよさそう．
* testに使い方や仕様を盛り込む
* CVMモデルから外れた場合
** DBを使うのが面倒なので，txtとする．その置き場はlocalにする．
*追記：test駆動では，すでに開発が終了して，testが十分なされているコードの移植では無駄が多い．たんにクラス化して動作を確認する方が早い．

!! bundle他の記述
 bob% bundle gem shunkuntype --test=minitest
で必要なファイルが自動生成される．このあと，minitestをunit-testに変更する必要がある．
詳しくは，[[RubyGems_development]]にある．

!起動
rakeからyardが動かせるように.
 <   spec.add_development_dependency "yard", "~> 0.8"
をshunkuntype.gemspecに追加したあと，
<<< tcsh
bob% bundle install
bob% bundle exec rake yard
Files:           2
Modules:         1 (    1 undocumented)
Classes:         0 (    0 undocumented)
Constants:       1 (    1 undocumented)
Methods:         0 (    0 undocumented)
 0.00% documented
>>>
bundle installしないと，このdiretoryでbundleがyardを使えない．

!!exe
exeがないので自動生成．conflictが起こっている時には'n'で飛ばした．
<<< tcsh
bob% bundle gem shunkuntype -b -t
Creating gem 'shunkuntype'...
Code of conduct enabled in config
MIT License enabled in config
   identical  shunkuntype/Gemfile
   identical  shunkuntype/.gitignore
   identical  shunkuntype/lib/shunkuntype.rb
   identical  shunkuntype/lib/shunkuntype/version.rb
    conflict  shunkuntype/shunkuntype.gemspec
Overwrite /Users/bob/Ruby/shunkuntype/shunkuntype.gemspec? (enter "h" for help) [Ynaqdh] n
        skip  shunkuntype/shunkuntype.gemspec
      create  shunkuntype/Rakefile
    conflict  shunkuntype/README.md
Overwrite /Users/bob/Ruby/shunkuntype/README.md? (enter "h" for help) [Ynaqdh] n
        skip  shunkuntype/README.md
   identical  shunkuntype/bin/console
   identical  shunkuntype/bin/setup
   identical  shunkuntype/CODE_OF_CONDUCT.md
   identical  shunkuntype/LICENSE.txt
   identical  shunkuntype/.travis.yml
      create  shunkuntype/.rspec
      create  shunkuntype/spec/spec_helper.rb
      create  shunkuntype/spec/shunkuntype_spec.rb
      create  shunkuntype/exe/shunkuntype
Initializing git repo in /Users/bob/Ruby/shunkuntype
>>>
exe/shunkuntypeは
<<< ruby
#!/usr/bin/env ruby

require "shunkuntype"

Shunkuntype::Command.run(ARGV)
>>>
となっている．shunkuntype.rbのclass Commandに以下の記述を追加．
<<< ruby
    def self.run(argv=[])
        print "Hello world.\n"
#      new(argv).execute                                                                                           
    end

    def initialize(argv=[])
      @argv = argv
    end
>>>
すると
<<< tcsh
bob% bundle exec exe/shunkuntype 
Hello world.
>>>
で動いていることが確認できる．あとは，これを普通に改良していくだけ．

!!buildのための改良
<<< tcsh
bob% bundle exec rake build
rake aborted!
WARNING:  See http://guides.rubygems.org/specification-reference/ for help
ERROR:  While executing gem ... (Gem::InvalidSpecificationException)
    ["Rakefile.rb"] are not files
>>>
なんで，
 ln -s Rakefile Rakefile.rb
次に，
<<< tcsh
bob% bundle exec rake install:local
rake aborted!
WARNING:  See http://guides.rubygems.org/specification-reference/ for help
ERROR:  While executing gem ... (Gem::InvalidSpecificationException)
    "FIXME" or "TODO" is not a description

rake aborted!
WARNING:  See http://guides.rubygems.org/specification-reference/ for help
ERROR:  While executing gem ... (Gem::InvalidSpecificationException)
    missing value for attribute summary
>>>
なんで，
<<< tcsh
<   spec.summary       = %q{type training.}
<   spec.description   = %q{type training for shunkun.}
---
>   spec.summary       = %q{TODO: Write a short summary, because Rubygems requires one.}
>   spec.description   = %q{TODO: Write a longer description or delete this line.}
>>>
とちゃんと書かんと．

! gem serverの起動とcheck
公開できない可能性のあるアプリの開発のため，非公開のサーバを立てた場合の動作検証を進めておく．

今は，http://nishitani0.kwansei.ac.jp/~bob/nishitani0/gems/に置いている．この下のgemsに作成したshunkuntype-0.1.0.gemを置くとgem searchで見つかる．

<<< tcsh
bob% sudo gem install builder
Password:
Fetching: builder-3.2.2.gem (100%)
Successfully installed builder-3.2.2
Parsing documentation for builder-3.2.2
Installing ri documentation for builder-3.2.2
1 gem installed
bob% gem generate_index
Generating Marshal quick index gemspecs for 8 gems
........
Complete
Generated Marshal quick index gemspecs: 0.006s
Generating specs index
Generated specs index: 0.000s
Generating latest specs index
Generated latest specs index: 0.000s
Generating prerelease specs index
Generated prerelease specs index: 0.000s
Compressing indicies
Compressed indicies: 0.001s

bob% ls -r *
specs.4.8.gz             prerelease_specs.4.8.gz  latest_specs.4.8.gz
specs.4.8                prerelease_specs.4.8     latest_specs.4.8

quick:
Marshal.4.8/

gems:
shunkuntype-0.1.0.gem

>>>

<<< tcsh 
bob% setenv HTTP_PROXY http://proxy.kwansei.ac.jp:8080
bob% setenv HTTP_PROXY http://proxy.ksc.kwansei.ac.jp:8080
bob% gem source -a 'http://nishitani0.kwansei.ac.jp/~bob/nishitani0/gems/' 
http://nishitani0.kwansei.ac.jp/~bob/nishitani0/gems/ added to sources
bob% gem search shunkuntype -r

*** REMOTE GEMS ***

shunkuntype (0.1.0)
>>>
と無事見えた．

!!install
<<< tcsh
bob% gem install shunkuntype
Successfully installed shunkuntype-0.1.0
Parsing documentation for shunkuntype-0.1.0
Done installing documentation for shunkuntype after 0 seconds
WARNING:  Unable to pull data from 'http://localhost:8080': bad response Gateway Timeout 504 (http://localhost:8080/specs.4.8.gz)
1 gem installed
[bobsMacBookAir:~/Ruby/shunkuntype] bob% shunkuntype
shunkuntype: Command not found.
>>>
で，がくっときたが，
<<< tcsh
bob% ls /usr/local/lib/ruby/gems/2.2.0/gems/shunkuntype-0.1.0/
CODE_OF_CONDUCT.md   LICENSE.txt          Rakefile             bin/                 lib/
Gemfile              README.md            Rakefile.rb          exe/                 shunkuntype.gemspec
bob% ls /usr/local/lib/ruby/gems/2.2.0/bin
shunkuntype*
bob% /usr/local/lib/ruby/gems/2.2.0/bin/shunkuntype
Hello world.
>>>
無事完動．あとはpathを書いとくのがいいのかな．．．/usr/local/binにいれるというのも一つかも．

!!!追補
installし直すと/usr/local/binに追加された．これは，
 gem update systems
でgemのversionが2.4.5->2.5.1に上がったため？．なぜなら，正しくは，
<<< tcsh
bob% gem environment
RubyGems Environment:
  - RUBYGEMS VERSION: 2.5.1
  - RUBY VERSION: 2.2.2 (2015-04-13 patchlevel 95) [x86_64-darwin13]
  - INSTALLATION DIRECTORY: /usr/local/lib/ruby/gems/2.2.0
  - USER INSTALLATION DIRECTORY: /Users/bob/.gem/ruby/2.2.0
  - RUBY EXECUTABLE: /usr/local/opt/ruby/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/local/bin
  - SPEC CACHE DIRECTORY: /Users/bob/.gem/specs
  - SYSTEM CONFIGURATION DIRECTORY: /usr/local/Cellar/ruby/2.2.2/etc
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-darwin-13
  - GEM PATHS:
     - /usr/local/lib/ruby/gems/2.2.0
     - /Users/bob/.gem/ruby/2.2.0
     - /usr/local/Cellar/ruby/2.2.2/lib/ruby/gems/2.2.0
  - GEM CONFIGURATION:
     - :update_sources => true
     - :verbose => true
     - :backtrace => false
     - :bulk_threshold => 1000
     - :sources => ["https://rubygems.org/", "http://nishitani0.kwansei.ac.jp/~bob/nishitani0/gems/"]
  - REMOTE SOURCES:
     - https://rubygems.org/
     - http://nishitani0.kwansei.ac.jp/~bob/nishitani0/gems/
>>>
のEXECUTABLE DIRECTORYにinstallされる．sourceによるPATHのupdateを忘れずに．

! shunkuntypeの移植
!!shunkuntype.gemspecのfilesへの登録
新しくcode filesを足していく．この時，gem buildでちゃんと認識するには，
spec.filesに必要なファイルを足していく必要がある．

bundle gemで環境を作った場合，この操作は
  spec.files         = `git ls-files -z`.split("\x0").reject { |f| f.match(%r{^(test|spec|features)/}) }
により代行される．従って，gitでの操作
 git add -A
 git commit
などが必要．

!!directoryの参照
shunkuntypeをどこにinstallあるいは，どこで起動されるかにかかわらずdataなどが
適切に参照されるようにするために，
    data_dir=File.expand_path('../../../lib/data', __FILE__)
    file_name="#{data_dir}/STEP-47.txt"
などとしている．ここでの__FILE__はexe/shunkuntypeが起点．

!!optparse
perfect rubyではsubcommandを扱うためにtodo/options.rbに二重構造のparseを使う例を示している．
shunkuntypeでは一重でいいので，shunkuntype.rbに以下の通り記述．
<<< ruby
    def execute
      @argv << '--help' if @argv.size==0
      command_parser = OptionParser.new do |opt|
        opt.on('-v', '--version','Show program version.') { |v|
          opt.version = Shunkuntype::VERSION
          puts opt.ver
        }
        opt.on('-i', '--init','initialize data files.') {|v| InitDataFiles.new }
        opt.on('-s', '--speed','speed check.') {|v| SpeedCheck.new }
        opt.on('-m', '--minute [VAL]','minute training of file Integer.', Integer) {|v| Training.new(v) }
        opt.on('-h', '--history','view training history.') {|v| FinishCheck.new }
        opt.on('-r', '--report','submit data to dmz0') { |v| report_submit()}
      end
      command_parser.parse!(@argv)
      exit
    end
>>>
ここで[VAL]は「Integerの引数をとってもいい（とらなくてもいい）」ことを表している．この場合，Training.new(v)のvにはnilがはいって引き渡されるため，initialize(val=47)としてdefaultを
定義できなかった．そこで，
<<< ruby
  val ||= 47
>>>
としている．

!!テスト環境の手順と注意
テスト環境での検証を進めるときには，いちどbuildしたものをinstallする必要がある．server経由でinstallするとversionが変わらないと新たにinstallを行わない．buildではなく直接installすると最新版がversionの違いにかかわらずinstallされて動作検証が可能．
 bundle exec rake install
では固まることがある．これは，ネット経由で通常のgemサーバーの情報を取ろうとしているため．
 bundle exec rake install:local
でlocalのみにinstallされる．installしたのを直接叩いてテストすると便利．
! 未対応
* debugとpryのためにreadline versionを
* referenceをlocalで参照できるように．
